---
import { Icon } from "astro-icon";
---

<div id="randomizer">
  <Icon pack="ion" name="refresh" />
</div>

<style is:global>
  :root {
    --first-color: hsl(0, 0%, 100%);
    --last-color: hsl(0, 0%, 0%);
    --first-color-dark: hsl(0, 0%, 30%);
    --last-color-dark: hsl(0, 0%, 15%);
  }

  body {
    background: linear-gradient(to right, #fff, #ccc);
    background: linear-gradient(-45deg, var(--first-color), var(--last-color));

    background-size: 400% 400%;
    animation: gradient 15s ease infinite;
    background-attachment: fixed;
  }

  body.darkmode {
    background: linear-gradient(
      to top,
      var(--first-color-dark),
      var(--last-color-dark)
    );
    background-attachment: fixed;
  }

  @keyframes gradient {
    0% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
  }

  #randomizer {
    padding: 0.275rem;
    width: 2rem;
    height: 2rem;
    cursor: pointer;
    z-index: 999;
    border-radius: 100vw;
    background: var(--font-color);
  }

  #randomizer:hover {
    background: linear-gradient(
      -30deg,
      var(--first-color-dark),
      var(--last-color-dark)
    );
    background-size: 200% 200%;
    animation: gradient 2s ease infinite;
  }

  #randomizer [astro-icon] {
    width: 100%;
    height: auto;
    color: var(--last-color);
  }

  .darkmode #randomizer {
    background: var(--last-color);
  }
  .darkmode #randomizer:hover {
    background: linear-gradient(-30deg, var(--first-color), var(--last-color));
    background-size: 200% 200%;
    animation: gradient 1s ease infinite;
  }

  .darkmode #randomizer [astro-icon] {
    color: var(--last-color-dark);
  }
</style>
<script>
  const random = (min, max) => Math.random() * (max - min) + min;

  const randomColor = () => {
    const h = Math.floor(random(0, 360));
    const s = Math.floor(random(50, 100));
    const l = Math.floor(random(50, 100));
    return { h, s, l };
  };

  const hslToString = ({ h, s, l }) => `hsl(${h}, ${s}%, ${l}%)`;

  const darkenColor = ({ h, s, l }) => {
    const darkL = l * 0.2; // Reduce lightness to 20%
    return { h, s, l: darkL };
  };

  const applyRandomColors = () => {
    const gradient = document.body;
    const firstColor = randomColor();
    const lastColor = randomColor();
    const darkFirstColor = darkenColor(firstColor);
    const darkLastColor = darkenColor(lastColor);

    gradient.style.setProperty("--first-color", hslToString(firstColor));
    gradient.style.setProperty("--last-color", hslToString(lastColor));
    gradient.style.setProperty(
      "--first-color-dark",
      hslToString(darkFirstColor)
    );
    gradient.style.setProperty("--last-color-dark", hslToString(darkLastColor));
  };

  document.addEventListener("DOMContentLoaded", () => {
    const randomizerButton = document.querySelector("#randomizer");
    applyRandomColors(); // Apply initial colors

    if (randomizerButton) {
      randomizerButton.onclick = applyRandomColors; // Reapply colors on button click
    }
  });
</script>
