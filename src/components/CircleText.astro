---
interface Props {
  rotateSpeed?: string;
  rotateDirection?: "normal" | "reverse";
  text?: string;
}

const {
  rotateSpeed = "5s",
  rotateDirection = "normal",
  text = "Text rotating around a circle path with SVG!",
}: Props = Astro.props;
---

<div id="container">
  <div id="circle">
    <svg
      version="1.1"
      xmlns="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      x="0px"
      y="0px"
      width="300px"
      height="300px"
      viewBox="0 0 300 300"
      enable-background="new 0 0 300 300"
      xml:space="preserve"
    >
      <defs>
        <path
          id="circlePath"
          d="M 150, 150 m -60, 0 a 60,60 0 0,1 120,0 a 60,60 0 0,1 -120,0 "
        ></path>
      </defs>
      <circle cx="150" cy="100" r="75" fill="none"></circle>
      <g>
        <use xlink:href="#circlePath" fill="none"></use>
        <text fill="currentColor">
          <textPath xlink:href="#circlePath">{text}</textPath>
        </text>
      </g>
    </svg>
  </div>
</div>

<style>
  :root {
    --rotate-speed: 5s;
    --rotate-direction: normal;
  }

  * {
    /* border: 1px solid red; */
  }

  :global(#container) {
    position: sticky;
    /* position: fixed; */
    /* right: 0rem; */
    top: 0rem;
    z-index: 2;

    width: 100%;
    height: auto;
    display: flex;
    align-items: flex-start;
    justify-content: right;
    overflow: hidden;
    padding: 0;
  }

  #circle {
    /* position: absolute; */

    width: clamp(8rem, 3.2rem + 24vw, 32rem);
    width: 20%;
    aspect-ratio: 1;

    overflow: hidden;
    transform: scale(1.5);
  }

  #circle text {
    font-family: var(--font-family-special);
    font-size: 1rem;
    color: var(--circle-ticker);
    letter-spacing: 0.135em;
    /* opacity: 0.8; */
    user-select: none;
    /* mix-blend-mode: multiply; */
  }

  #circle svg {
    /* position: relative; */
    animation: rotate var(--rotate-speed) infinite linear;
    animation-direction: var(--rotate-direction);
    aspect-ratio: 1;
    width: 100%;
    height: 100%;
  }
  /* 
  @keyframes rotate {
    from {
      transform: rotate(360deg);
    }
    to {
      transform: rotate(0);
    }
  } */
</style>

<script>
  // Function to update the rotation of the SVG
  const circle = document.getElementById("circle");
  const svg = circle?.querySelector("svg");

  document.addEventListener("scroll", () => {
    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
    const rotation = scrollTop * -0.3; // Adjust the multiplier to control the speed
    if (svg) {
      svg.style.transform = `rotate(${rotation}deg)`;
    }
  });
</script>
