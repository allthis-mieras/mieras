---
const props = {
  direction: "left", // "left" or "right"
  speed: 2, // Smoothness speed
  gap: "10px", // Gap between items
  itemWidth: "40vw", // Width of each item
  itemHeight: "150px", // Height of each item
};
---

<section class="marquee">
  <div class="marquee-carousel">
    <div class="marquee-items">
      <slot />
    </div>
  </div>
</section>

<style>
  .marquee {
    position: relative;
    z-index: 3;
    overflow: hidden;
    padding: 50px 0;
  }

  .marquee-carousel {
    display: flex;
    white-space: nowrap;
  }

  .marquee-item {
    display: inline-block;
    width: var(--item-width, 40vw);
    height: var(--item-height, 150px);
    margin-right: var(--item-gap, 10px);
    background-color: var(--item-bg, #6e4ce1);
    border-radius: 16px;
  }
</style>

<script>
  import { onMount } from "solid-js";
  import gsap from "gsap";
  import { ScrollTrigger, ScrollSmoother } from "gsap/ScrollTrigger";
  import Swiper, { FreeMode } from "swiper";
  import "swiper/swiper-bundle.min.css";

  gsap.registerPlugin(ScrollTrigger, ScrollSmoother);

  onMount(async () => {
    ScrollTrigger.refresh();

    ScrollTrigger.config({
      autoRefreshEvents: "visibilitychange,DOMContentLoaded,load, resize",
    });

    const smoother = ScrollSmoother.create({
      wrapper: "#smooth-wrapper",
      content: "#smooth-content",
      smooth: props.speed,
      smoothTouch: false,
      normalizeScroll: true,
      ignoreMobileResize: true,
      effects: true,
      preventDefault: true,
    });

    const marquee = document.querySelector(".marquee");
    const carousel = marquee.querySelector(".marquee-carousel");
    const items = carousel.querySelector(".marquee-items");
    const item = carousel.querySelectorAll(".marquee-item");

    carousel.classList.add("swiper-container");
    items.classList.add("swiper-wrapper");
    item.forEach((e) => e.classList.add("swiper-slide"));

    const slider = new Swiper(carousel, {
      slidesPerView: "auto",
      loop: true,
      freeMode: true,
      freeModeMomentumBounce: false,
      freeModeMomentumVelocityRatio: 0.3,
    });

    const tl = new gsap.timeline();
    const direction = props.direction === "left" ? -1 : 1;

    tl.set(carousel, { willChange: "transform" });

    tl.fromTo(
      carousel,
      {
        x: 300 * direction,
      },
      {
        x: 0,
        ease: "none",
      },
      0
    );

    tl.set(carousel, { willChange: "auto" });

    ScrollTrigger.create({
      trigger: marquee,
      animation: tl,
      start: "top bottom",
      end: "bottom top",
      scrub: 0.3,
      refreshPriority: -14,
    });
  });
</script>
